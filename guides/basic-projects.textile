---
:author: Foo Bar
:title: Basic Projects
---
p. Be sure to read the [[Installation]] instructions first. You might also want to check out the [[Underlying
Sinatra Overview]] section on the guides, for deeper understanding of Padrino core features similarities with
Sinatra.

h2. Generating a Project

p. To generate a new Padrino project using its defaults (RSpec for testing and Haml for rendering) and no
database adapter, simply invoke the following command:

pre[bash]. $ padrino g project my_project # defaults to rspec and haml

p. Padrino has also built-in support for several different mocking, testing, rendering, ORM(object-relational
mapping), and JavaScript components.

pre[bash]. $ padrino g project custom_project -t rspec -d activerecord -s prototype
# this will generate a new padrino custom_project using rspec, activerecord, haml and prototype

For a breakdown of all the available components options please refer to the [[Generators]] page.

h3. Persistence Engine

p. Whenever you are creating a new project, Padrino will assume by default that a database is not required for
your project.

To add support for a persistence engine, specify a supported ORM(object-relational mapping) of your choice to
use by flagging the <tt>padrino g</tt> command with the *-d* option followed by the name of your
ORM(object-relational mapping):

pre[bash]. $ padrino g project your_project -d activerecord # Uses ActiveRecord
$ padrino g project your_project -d datamapper   # Uses Datamapper
$ padrino g project your_project -d mongomapper  # Uses MongoMapper
$ padrino g project your_project -d sequel       # Uses Sequel
$ padrino g project your_project -d couchdb      # Uses CouchDB

For the SQL-based persistence engines, you can even specify the RDBMS adapter to use with the *-a* option
followed by the name of the adapter:

pre[bash]. $ padrino g project your_project -d datamapper   -a mysql    # Uses Datamapper and MySQL
$ padrino g project your_project -d activerecord -a postgres # Uses ActiveRecord and Postgres
$ padrino g project your_project -d sequel       -a sqlite   # Uses Sequel and Sqlite3

The adapters currently supported are __sqlite__, __mysql__, and __postgres__ for use with __datamapper__,
__activerecord__, or __sequel__.

h2. Generating Applications

p. Padrino's main concept is to generate a default "project" or "core application":

pre[bash]. $ padrino g project my_project # creates a Padrino project with defaults to RSpec and haml

You can then add, if needed, sub-applications to your existing Padrino "project":

pre[bash]. $ cd my_project
my_project $ padrino g app gallery

p. You can also generate your own controllers, mailers, models, etc... for your "gallery" app as well.

pre[bash]. my_project $ padrino g controller get:index --app gallery

p. Whenever generating a "mounted" app, Padrino will mount that application automatically. As a reference, the
above example "gallery" application will be mounted to: /gallery

p. You can easily change and configure your "mounted" application path and decide where your applications will
be mounted, by editing your _config/apps.rb_ file.

h2. Generating the Admin Section

p. Let's start by creating a new Padrino project using Active Record:

pre[bash]. $ padrino g project blog -d activerecord

p. Install all project dependencies:

pre[bash]. $ cd blog
blog $ bundle install

p. Padrino ships with a beautiful Admin interface, highly inspired by the
"web-app-theme":http://github.com/pilu/web-app-theme.

p. Remember that Padrino has been principally structured and designed for mounting multiple applications at
the same time. Under this perspective, our *admin* section is nothing but a new padrino *application*:

pre[bash]. blog $ padrino g admin

p. You need to configure your database settings in config/database.rb and run your migrations to add tables
and columns to your database:

pre[bash]. blog $ padrino rake ar:migrate

p. Create your first admin account; this is easily achieved by seeding your database with default admin data,
stored in your _seed.rb_ file:

pre[bash]. blog $ padrino rake seed

p. You will see this in your terminal:

<pre>Which email do you want use to log into admin? info@padrino.local
Tell me the password to use: foobar

Perfect! Your account was created.

Now you can start your server with Padrino start and then log into /admin with:
email: info@padrino.local
password: foobar
</pre>

p. You are now ready to start your webserver:

pre[bash]. blog $ padrino start

p. Point your browser to "http://localhost:3000/admin":http://localhost:3000/admin and log in by using the
email and password provided while seeding your database:

h3. Adding a model

p. Let's add a new Post model to our blog:

pre[bash]. blog $ padrino g model post name:string body:text

p. Run the migrations to add database table columns to our database for our newly created Post model:

pre[bash]. blog $ padrino rake ar:migrate

p. Create a new admin section for managing (creating, updating, deleting) our blog posts:

pre[bash]. blog $ padrino g admin_page post

p. That's All! Start your webserver and begin adding some posts.
