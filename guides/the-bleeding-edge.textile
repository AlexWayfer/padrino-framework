---
:author: Foo Bar
:title: The Bleeding Edge
---
p. You have three ways of using Padrino edge; the first one is using the git source code in a gem file, the
second one is using a vendored version, and the third is to install edge into system gems from repository.

p. *Git in Gemfile* is suitable for those guys that *only* want Padrinoâ€™s latest bleeding edge code.

p. *System Gems* is suitable for people that want to use the latest padrino and freely use @padrino g@ and
@padrino@.

p. *Path in Gemfile* is recommended for developers because they can share their changes and merge repos
between projects.

h2. Git in Gemfile

pre[ruby]. # Edit Gemfile
gem 'padrino', :git => "git://github.com/padrino/padrino-framework.git"

p. and from console:

pre[bash]. $ bundle install

p. after that you need to run your app in the bundler environment because if you call directly:

pre[bash]. $ padrino g admin

p. you will use system wide gems. So for do that remember to run commands with @bundle exec@ as a prefix like:

pre[bash]. $ bundle exec padrino start
$ bundle exec padrino g controller foo
$ bundle exec padrino g admin
$ bundle exec padrino g model post

You can find more info about bundler usage on their "site":http://gembundler.com/

h2. System Gems from Repository

If you want to install the padrino edge gems into your system rubygems, simply follow the following steps.
First, clone the padrino repository:

pre[bash]. $ cd /tmp
$ git clone git://github.com/padrino/padrino-framework.git

Next, we should mark the version as dev(elopment) to get a fresh set of gems:

pre[ruby]. # /tmp/padrino-framework/padrino-core/lib/padrino-core/version.rb
module Padrino
VERSION = '0.9.11-dev' unless defined?(Padrino::VERSION) # Change to bump version
#...
end

Finally, run the @fresh@ rake command to install the latest version:

pre[bash]. padrino-framework$ sudo rake fresh

his will install the latest 'edge' gems into rubygems. Be sure to verify your project's Gemfile depends on the
edge version you installed:

pre[ruby]. Gemfile
# Padrino
gem 'padrino', 'X.X.X'  # This should be the version you installed earlier

or you can generate a new project easily and you can use padrino commands normally:

pre[bash]. padrino g project test-project

This should allow you to use the latest padrino code from your system.

h2. Path in Gemfile

pre[bash]. $ mkdir /src
# Remember to use your fork
$ git clone git://github.com/padrino/padrino-framework.git
# Edit your ~/.profile or ~/.bash_profile or some and add
alias padrino-dev="/src/padrino-framework/padrino-core/bin/padrino"
alias padrino-dev-gen="/src/padrino-framework/padrino-gen/bin/padrino-gen" # you can omit this

p. Reload source or open a new terminal window and check if you have _padrino-dev_ and _padrino-dev-gen_
commands correctly added to your path.

p. Create a new padrino project:

pre[bash]. padrino-dev-gen project test-project --dev

or if you don't have @padrino-dev-gen@

pre[bash]. padrino-dev g project test-project --dev

p. This will append the following lines to your test-app/Gemfile:

pre[ruby]. # Vendored Padrino
%w(core gen helpers mailer admin).each do |gem|
gem 'padrino-' + gem, :path => "/src/padrino-framework/padrino-" + gem
end

Make changes accordingly to your _/src/padrino-framework_ to see them reflected through your padrino project
now using your own vendored version of the framework.

*REMEMBER* to add always @--dev@ when generating a project because without that the generated project will use
the gem instead the git checkout.
