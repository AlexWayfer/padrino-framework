---
:author: Foo Bar
:title: Development Commands
---
Padrino also supports robust logging capabilities. By default, logging information will go to the STDOUT in
development (for use in a console) and in an environment-specific log file <tt>log/development.log</tt> in
test and production environments.

You can modify the logging behavior or disable logging altogether (more docs
"here":http://www.padrinorb.com/api/classes/Padrino/Logger.html):

<pre lang="ruby"><code># boot.rb
Padrino::Logger::Config[:development][:stream] = :to_file
Padrino.load!
</code></pre>

To use the logger within a Padrino application, simply refer to the <tt>logger</tt> method accessible within
your app and any controller or views:

<pre lang="ruby"><code># controllers/example.rb
SimpleApp.controllers do
get("/test") { logger.info "This is a test" }
end
</code></pre>

The logger automatically supports severity through the use of <tt>logger.info</tt>, <tt>logger.warn</tt>,
<tt>logger.error</tt>, et al.
For more information about the logger, check out our "Logger
RDOC":http://www.padrinorb.com/api/classes/Padrino/Logger.html

h2. Development Reloader

Padrino applications also have the enabled ability to automatically reload all changing application files
without the need to restart the server. Through the use of a customized Rack middleware, all files on the
'load path' are monitored and reloaded whenever changes are applied.

This makes rapid development much easier and provides a better alternative to 'shotgun' or 'rerun'  which
require the application server to be restarted which makes requests take much longer to complete.

An application can explicitly enable / disable reloading through the use of options:

<pre lang="ruby"><code># app.rb
class SimpleApp < Padrino::Application
disable :reload # reload is disabled in all environments
enable  :reload # enabled in all environments
end
</code></pre>

h2. Gemfile Dependency Resolution

Padrino has native support for <tt>bundler</tt> and the Gemfile system. If your Padrino application was
generated with <tt>padrino g</tt>, a Gemfile has already been created for your application. This file will
contain a list of all the dependencies for our application.

<pre lang="ruby"><code># /Gemfile
source :rubygems
gem 'sinatra',  :require => 'sinatra/base'
gem 'rack-flash'
</code></pre>

This manifest file uses the standard <tt>bundler</tt> gem syntax of which details can be found in the "Bundler
WebSite":http://gembundler.com.

This gem allows us to place all our dependencies into a single file. Padrino will then automatically require
all necessary files (if they exist on the system).

If the dependencies are not on the system, you can automatically vendor all necessary gems using the
<tt>bundle install ./vendor</tt> command within the application root or (only with bundler 1.0) run @bundle
install@ to install system wide. Note that this is all possible without any further effort than adding the
Gemfile (or having this generated automatically with generators explained later).

h2. Auto Load Paths

Padrino also intelligently supports requiring useful files within your application automatically and provides
functionality for easily splitting up your application into separate files. Padrino automatically requires
<tt>config/database.rb</tt> as a convention for establishing database connection. Also, any files within the
<tt>lib</tt> folder will be required automatically by Padrino.

This is powered by the fact that Padrino will automatically load (and reload) any directory patterns within
the 'prequesite paths'. Additional directory patterns can be added to the set of reloaded files as needed by
simply appending to the <tt>prerequisites</tt> within your application:

<pre lang="ruby"><code># config/boot.rb
Padrino.before_load do
SimpleApp.prerequisites << Padrino.root('my_app', 'custom_model.rb')
SimpleApp.prerequisites << Padrino.root('custom_folder/*.rb')
end
Padrino.load!
</code></pre>

This will instruct Padrino to autoload these files (and reload them when changes are detected). By default,
the load path contains certain paths known to contain important files such as controllers, mailers, models,
urls, and helpers.

h2. Terminal Commands

Padrino also comes equipped with multiple useful terminal commands which can be activated to perform common
tasks such as starting / stopping the application, executing the unit tests or activating an irb session.

The following commands are available:

<pre lang="bash"><code># starts the app server (non-daemonized)
$ padrino start
# starts the app server (daemonized) with given port, environment and adapter
$ padrino start -d -p 3000 -e development -a thin

# Stops a daemonized app server
$ padrino stop

# Bootup the Padrino console (irb)
$ padrino console

# Run/List tasks
$ padrino rake
</code></pre>

The last command "padrino rake" look for rake files in:

<pre lang="bash"><code>
lib/tasks/**/*.rake
tasks/**/*.rake
test/test.rake
spec/spec.rake
</code></pre>

In this way you can customize project tasks.

Using these commands can simplify common tasks making development that much smoother.

h2. Special Folders

Padrino load these paths:

<pre lang="bash"><code># special folders
project/lib
project/models
project/shared/lib
project/shared/models
project/each_app/models
</code></pre>

This mean that you are free to store for example @models@ where you prefer, if you have two or more apps with
same models you can use @project/shared/models@ or @root/models@.

If you have only one app you still use @project/app/models@(this is the default padrino g choice)

Remember that if you need to load other paths you can use:

<pre lang="ruby"><code>Padrino.set_load_paths("path/one")</code></pre>

and if you need to load dependencies use:

<pre lang="ruby"><code>Padrino.require_dependencies("path/one/**/*.rb")</code></pre>
